<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Recipe</title>
    <link rel="stylesheet" type="text/css" href="/main.css">
    <link rel="stylesheet" type="text/css" href="/newRecipe.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Fraunces:ital,opsz,wght@0,9..144,100..900;1,9..144,100..900&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Quicksand:wght@300..700&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('partials/header') %>

    <!--Everything here is the same as the newRecipe page except for the values being prefilled with that of the selected
    recipe to edit and the form being sent to the editRecipe route instead of the newRecipe Route.

    In the future, either put the javascript in its own file and link to both of these pages, and/or combine both and only
    display values if editRecipe is requested and change the form route accordingly-->
    <div class="newRecipeWrapper">
         <!--Recipe Form-->

         <% if (recipeExists === true) {%>A recipe with that title already exists. Please try a new one.<%}%>
        
        <form class="col" id='submitRecipe' action='/recipe/<%=recipe.title%>/editRecipe' method='post' enctype="multipart/form-data">
            <h1>Edit Recipe</h1>
            <div class="title col">
                <h2>Title</h2>
                <input type='text' name='title' required pattern="[^{}<>]{2,50}" value="<%=recipe.title%>"></input>
            </div>
            <div class="favourite col">
                <h2>Favourite</h2>
                <input class="checkbox" type="checkbox" name="favourite" <%if (recipe.favourite){%>checked<%}%>></input>
            </div>
            <div class="tagWrapper">
                <input type="hidden" name="categories" class="categories" value=""></input>
                <div class="tagTitle">
                  <h2>Categories</h2>
                </div>
                <div class="tagContent">
                  <p>Press enter after each category or select from popular categories below</p>
                  <ul><input type="text" spellcheck="false"></ul>
                  <div class="presetWrapper">
                    <p class="presetTag">Main</p>
                    <p class="presetTag">Side</p>
                    <p class="presetTag">Dessert</p>
                    <p class="presetTag">Cocktail</p>
                    <p class="presetTag">Slow Cooker</p>
                    <p class="presetTag">Air Fryer</p>
                  </div>
                </div>
              </div>

        <% if (recipe.isImg){%>
            <input type='text' hidden name='isImg' value="true" required></input>
        <%}%>
            

        <!-- If the recipe is a link (contains a proper URL) render the link input for the form -->
            <% if (recipe.recipeUrl !== "noUrl"){%>
                <div class="Link">
                    <h2>Recipe Link</h2>
                    <input type='text' name='link' value = <%=recipe.recipeUrl%> required></input>
                </div>     
            <%}%>

        <!-- If the recipe is a local recipe (contains no URL) render the image, description, ingredients, and steps for the form -->
            <%if (recipe.recipeUrl == "noUrl" && !recipe.isImg){%>
            <div class="upload col">
                <h2>Upload New Picture (Optional)</h2>
                <input type="file" class="uploadInput" max-length="1" name="recipeImage" accept="image/*">
            </div>
            <div class="description">
                <h2>Description</h2>
                <textarea type='text' name='description' required pattern="[^{}<>]{2,500}"><%=recipe.description%></textarea>
            </div>
            <div class="ingredients row">
                <h2>Ingredients</h2>
                <button type="button" id="addIngredient">+</button>
            </div>

            <div class="ingredientsList">
                <%for (i = 0; i < recipe.ingredients.length; i++){%>
                    <div class="row ingredientsNode" id="ingredientDiv<%=i+1%>">
                        <h3><%=i+1%></h3>
                        <input name="ingredient<%=i+1%>" type="text" required="" pattern="[^{}<>]{2,70}" value="<%=recipe.ingredients[i]%>">
                        <button id="ingredientBtn<%=i+1%>">X</button>
                    </div>
                    <%}%>
            </div>
            
            <div class="steps row">
                <h2>Steps</h2>
                <button type="button" id="addStep">+</button>
            </div>

            <div class="stepsList">
                <%for (i = 0; i < recipe.steps.length; i++){%>
                    <div class="stepsNode row" id="stepDiv<%=i+1%>">
                        <h3><%=i+1%></h3>
                        <textarea name="step<%=i+1%>" type="text" required="" pattern="[^{}<>]{2,70}"><%=recipe.steps[i]%></textarea>
                        <button id="stepBtn<%=i+1%>" type="button">X</button>
                    </div>
                <%}%>
            </div>

            <%}%>
            <div class="submitWrapper">
                <button type='button' class='submitBtn'>SUBMIT</button>
            </div>
        </form>
    </div>

    <script>
        let isLink = "<%=JSON.stringify(recipe.isLink).replace(/^"|"$/g, '')%>";
        let isImg ="<%=JSON.stringify(recipe.isImg).replace(/^"|"$/g, '')%>";

        //--------------------------TAG SECTION LOGIC ----------------------//
        const tagUl = document.querySelector(".tagContent ul"),
        tagInput = document.querySelector(".tagContent ul input"),
        tagNumb = document.querySelector(".tagDetails span"),
        tagPreset = document.querySelectorAll(".presetTag");

        let maxTags = 10,
        tags = [];

        //Seed existing categories
        let existingCategories = <%- JSON.stringify(recipe.categories) %>;

        if (existingCategories){
        existingCategories.forEach((category) => {
            tags.push(category)
        })
        }

        countTags();
        createTag();

        function countTags(){
            tagInput.focus();
        }

        function seed(){

        }

        function createTag(){
            tagUl.querySelectorAll("li").forEach(li => li.remove());
            tags.slice().reverse().forEach(tag =>{
                let liTag = `<li>${tag} <i class="uit uit-multiply" onclick="remove(this, '${tag}')"></i></li>`;
                tagUl.insertAdjacentHTML("afterbegin", liTag);
            });
            countTags();
        }

        function remove(element, tag){
            let index  = tags.indexOf(tag);
            tags = [...tags.slice(0, index), ...tags.slice(index + 1)];
            element.parentElement.remove();
            countTags();
        }

        function addTag(e){
            if(e.key == "Enter"){
                let tag = e.target.value.replace(/\s+/g, ' ');
                if(tag.length > 1 && !tags.includes(tag)){
                    if(tags.length < 10){
                        tag.split(',').forEach(tag => {
                            tags.push(tag);
                            createTag();
                        });
                    }
                }
                e.target.value = "";
            }
        }

        tagInput.addEventListener("keyup", addTag);
        tagPreset.forEach((tag) => {
            tag.addEventListener("click", function(){
                console.log("here");
                tags.push(this.textContent);
                createTag();
            })
        })
    // ----------------------------------------------------------------------------------------------//
    // -----------------------------       END OF TAG LOGIC       ------------------------------------//
    // ----------------------------------------------------------------------------------------------//
        
    if (isLink === "false" && isImg === "false"){
        console.log("here")
        
        //Assign button for adding steps/ingredients, and step area/ingredients for appending to.
        let stepAddButton = document.getElementById("addStep");
        let stepsArea = document.querySelector(".stepsList")
        let ingredientAddButton = document.getElementById("addIngredient");
        let ingredientsArea = document.querySelector(".ingredientsList")

        /*empty arrays for steps and ingredients are initialized as well as counters for how many are on screen
        this is also used when editing a recipe that already has multiple steps, and gets changed anytime
        any steps or ingredients are added or deleted*/
        let steps = [];
        let ingredients = [];
        let stepNumber;
        let ingredientNumber;

        //-----------------------------------------------//
        //-----------FUNCTION DECLERATIONS--------------//
        //-----------------------------------------------//

        //Assign function to recount "steps" or "ingredients"
        let setNumber = (recipeReq) => {
            if (recipeReq === "steps"){
                steps = document.querySelectorAll(`.stepsNode`);
                if (steps[0] === undefined){
                    stepNumber = 0;
                } else {
                    stepNumber = steps.length;
                }
            }
            else if (recipeReq === "ingredients"){
                ingredients = document.querySelectorAll(`.ingredientsNode`);
                if (ingredients[0] === undefined){
                    ingredientNumber = 0;
                } else {
                    ingredientNumber = ingredients.length;
                }
            }
            else {
                console.log("Error, valid paramaters are 'steps' or 'ingredients'")
            }
        }

        //Assign function to assign delete buttons for steps or ingredients
        let initDeleteButtons = (recipeReq) => {
            if (recipeReq === "steps"){
                for (i = 1; i < steps.length + 1; i++){
                let thisStepsNode = document.querySelector(`#stepDiv${i}`)
                let thisNodeDeleteBtn = document.querySelector(`#stepBtn${i}`)
                
                /*When a nodes delete button is clicked, remove the node, recount the nodes,
                reset the steps headers, and id's in order again accordingly*/
                thisNodeDeleteBtn.addEventListener("click", function(){
                    thisStepsNode.remove();
                    setNumber("steps");
                    reset("steps"); 
                    })
                }
            }
            //repeat for ingredients
            else if (recipeReq === "ingredients"){
                for (i = 1; i < ingredients.length + 1; i++){
                let thisIngredientsNode = document.querySelector(`#ingredientDiv${i}`)
                let thisNodeDeleteBtn = document.querySelector(`#ingredientBtn${i}`)
                thisNodeDeleteBtn.addEventListener("click", function(){
                    thisIngredientsNode.remove();
                    setNumber("ingredients");
                    reset("ingredients"); 
                    })
                }
            } else {
                console.log("Error, valid paramaters are 'steps' or 'ingredients'")
            }
        }

        //Assign function to create new step or ingredient node
        let create = (recipeReq) => {

            if (recipeReq === "steps"){
                stepNumber += 1;
                //define elements for a node.
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("input");
                let deleteButton = document.createElement("button");
                //Add names, ids, types, and text-content to nodes
                h3.textContent = `${stepNumber}`;
                div.id = `stepDiv${stepNumber}`;
                div.classList.add("stepsNode");
                textInput.name = `step${stepNumber}`;
                textInput.type = "text";
                textInput.required = true;
                textInput.pattern = "[^{}<>]{2,300}";
                deleteButton.id = `stepBtn${stepNumber}`;
                deleteButton.textContent = "X";
                deleteButton.type = "button";
                //append nodes together and then append to the step area
                div.append(h3);
                div.append(textInput);
                div.append(deleteButton);
                stepsArea.append(div);
                //recount steps and update the step count
                setNumber("steps");
            }
            //repeat for ingredients
            else if (recipeReq === "ingredients"){
                ingredientNumber += 1;
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("textarea");
                let deleteButton = document.createElement("button");
                h3.textContent = `${ingredientNumber}`;
                div.classList.add("row");
                div.classList.add("ingredientsNode");
                div.id = `ingredientDiv${ingredientNumber}`;
                textInput.name = `ingredient${ingredientNumber}`;
                textInput.type = "text";
                textInput.required = true;
                textInput.pattern = "[^{}<>]{2,70}";
                deleteButton.id = `ingredientBtn${ingredientNumber}`;
                deleteButton.textContent = "X";
                div.append(h3);
                div.append(textInput);
                div.append(deleteButton);
                ingredientsArea.append(div);
                setNumber("ingredients")
            } else {
                console.log("Error, valid paramaters are 'steps' or 'ingredients'")
            }
        }

        /*Assign function to change ids, names, and h3s of steps to represent correct order counting from one
        after deleting a step or ingredient*/
        let reset = (recipeReq) => {
            if (recipeReq === "steps"){
                for (i=0; i < steps.length; i++){
                    steps[i].id = `stepDiv${i+1}`;
                    steps[i].children[1].name = `step${i+1}`
                    steps[i].children[0].textContent = `${i+1}`
                    steps[i].children[2].id = `stepBtn${i+1}`
                }
            }
            else if (recipeReq === "ingredients"){
                for (i=0; i < ingredients.length; i++){
                    ingredients[i].id = `ingredientDiv${i+1}`;
                    ingredients[i].children[1].name = `ingredient${i+1}`
                    ingredients[i].children[0].textContent = `${i+1}`
                    ingredients[i].children[2].id = `ingredientBtn${i+1}`
                }
            } else {
                console.log("Error, valid paramaters are 'steps' or 'ingredients'")
            }
        }
        

        //-----------------------------------------------//
        //---On Page Load and Initial Event Listeners----//
        //-----------------------------------------------//
        //initiate step number and delete buttons on page load
        setNumber("steps");
        initDeleteButtons("steps");
        setNumber("ingredients");
        initDeleteButtons("ingredients");
    
        //when step/ingredient add button is pressed, create new, append it, and then assign event listeners to delete buttons
        stepAddButton.addEventListener("click", function(){
            create("steps");
            initDeleteButtons("steps");
        })
        ingredientAddButton.addEventListener("click", function(){
            setNumber("ingredients");
            create("ingredients");
            initDeleteButtons("ingredients");
        })
    }
 
        //Manual validation checks before submit
        let submitBtn = document.querySelector(".submitBtn");
        let submitRecipeForm = document.querySelector("#submitRecipe");
        let categories = document.querySelector(".categories");

        //Prevent Enter key from submitting form, form is only submitted with button logic below
        submitRecipeForm.addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the form from submitting
        });


        //Checks to make sure every input is filled and that there is atleast one ingredient and one step before submitting. Error messages not handled.
        submitBtn.addEventListener("click", function(){
            let inputs = document.querySelectorAll("#submitRecipe input");
            let inputsFilled = true;
            let inputsValid = true;

            for (i = 0; i < inputs.length; i++){
                if (inputs[i].validity.valueMissing === true){
                    inputsFilled = false;
                    console.log("input missing");
                }

                /*
                if (inputs[i].validity.patternMismatch === true){
                    inputsValid = false;
                    console.log("pattern mismatch");
                }*/
            }

           
            if (inputsFilled == true && inputsValid == true){
                categories.value = tags;
                submitRecipeForm.submit("recipeLink");
            }
           
          
        })
    </script>
</body>
</html>
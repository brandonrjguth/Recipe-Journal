<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Recipe</title>
    <link rel="stylesheet" type="text/css" href="/main.css">
    <link rel="stylesheet" type="text/css" href="/newRecipe.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,700;1,100&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('partials/header') %>

    <!---->
    <% if (recipeExists === true) {%><div class="warning">A recipe with that title already exists. Please try a new one.</div><%}%>
    <% if (recipeSiteError === true){%><div class="warning">This recipe website is currently unsupported.</div><%}%>
    <div class="newRecipeWrapper">
         <!--Recipe Form-->
         <!--If the submitted recipe already exists this page is reloaded with an error message-->
         <!--All inputs have regex to insure correct patterns, submit button triggers javascript below to test for 
            patternValidity and empty inputs for entire page before submitting-->
        <form class="col" id='submitRecipe' action='/convertRecipe' method='post'>
            <h1>Convert Recipe</h1>
            <div class="favourite col form-group"> <!-- Added form-group class -->
                <h2>Favourite</h2>
                 <div class="custom-checkbox-wrapper">
                    <input type="checkbox" class="checkbox custom-checkbox-input" id="favouriteCheckbox" name="favourite">
                    <label for="favouriteCheckbox" class="custom-checkbox-label"></label> <!-- Added Label -->
                </div>
            </div>
            <div class="tagWrapper form-group"> <!-- Added form-group class -->
                <input type="hidden" name="categories" class="categories"></input>
                <div class="tagTitle">
                  <h2>Categories</h2>
                </div>
                <div class="tagContent">
                  <p>Press enter after each category or select from popular categories below</p>
                  <ul><input type="text" spellcheck="false"></ul>
                  <div class="presetWrapper">
                    <p class="presetTag">Main</p>
                    <p class="presetTag">Side</p>
                    <p class="presetTag">Dessert</p>
                    <p class="presetTag">Cocktail</p>
                    <p class="presetTag">Slow Cooker</p>
                    <p class="presetTag">Air Fryer</p>
                  </div>
                </div>
              </div>
            <div class="Link">
                <h2>Recipe Link</h2>
                <input type='text' name='link' required></input>
            </div>     
            <div class="submitWrapper">
                <button type='button' class='submitBtn'>SUBMIT</button>
            </div>
        </form>
    </div>

    <script>

        //--------------------------TAG SECTION LOGIC ----------------------//
        const tagUl = document.querySelector(".tagContent ul"),
        tagInput = document.querySelector(".tagContent ul input"),
        tagNumb = document.querySelector(".tagDetails span"),
        tagPreset = document.querySelectorAll(".presetTag");


        let maxTags = 10,
        tags = [];

        countTags();
        createTag();

        function countTags(){
            tagInput.focus();
        }

        function createTag(){
            tagUl.querySelectorAll("li").forEach(li => li.remove());
            tags.slice().reverse().forEach(tag =>{
                let liTag = `<li>${tag} <i class="uit uit-multiply" onclick="remove(this, '${tag}')"></i></li>`;
                tagUl.insertAdjacentHTML("afterbegin", liTag);
            });
            countTags();
        }

        function remove(element, tag){
            let index  = tags.indexOf(tag);
            tags = [...tags.slice(0, index), ...tags.slice(index + 1)];
            element.parentElement.remove();
            countTags();
        }

        function addTag(e){
            if(e.key == "Enter"){
                let tag = e.target.value.replace(/\s+/g, ' ');
                if(tag.length > 1 && !tags.includes(tag)){
                    if(tags.length < 10){
                        tag.split(',').forEach(tag => {
                            tags.push(tag);
                            createTag();
                        });
                    }
                }
                e.target.value = "";
            }
        }

        tagInput.addEventListener("keyup", addTag);
        tagPreset.forEach((tag) => {
            tag.addEventListener("click", function(){
                console.log("here");
                tags.push(this.textContent);
                createTag();
            })
        })
    // ----------------------------------------------------------------------------------------------//
    // -----------------------------       END OF TAG LOGIC       ------------------------------------//
    // ----------------------------------------------------------------------------------------------//


        //Manual validation checks before submit
        let submitBtn = document.querySelector(".submitBtn");
        let submitRecipeForm = document.querySelector("#submitRecipe");

        //Checks to make sure every input is filled and that there is atleast one ingredient and one step before submitting. Error messages not handled.
        submitBtn.addEventListener("click", function(){
            let inputs = document.querySelectorAll("#submitRecipe input");
            let categories = document.querySelector(".categories");
            let inputsFilled = true;
            let inputsValid = true;

            for (i = 0; i < inputs.length; i++){
                if (inputs[i].validity.valueMissing === true){
                    inputsFilled = false;
                    console.log("input missing");
                }
                if (inputs[i].validity.patternMismatch === true){
                    inputsValid = false;
                    console.log("pattern mismatch");
                }
            }

            if (inputsFilled === true && inputsValid === true){
                categories.value = tags;
                submitRecipeForm.submit();
            };
        })
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Recipe</title>
    
    <!-- PWA Support -->
    <link rel="manifest" href="/manifest.json">
    <meta name="theme-color" content="#ffffff">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="Recipe Journal">
    <link rel="apple-touch-icon" href="/imgs/logos/icon-180.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/imgs/logos/icon-152.png">
    <link rel="apple-touch-icon" sizes="167x167" href="/imgs/logos/icon-167.png">
    
    <link rel="stylesheet" type="text/css" href="/main.css">
    <link rel="stylesheet" type="text/css" href="/newRecipe.css">
    <script src="/validation.js" defer></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Fraunces:ital,opsz,wght@0,9..144,100..900;1,9..144,100..900&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Quicksand:wght@300..700&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('partials/header') %>

    <!---->
    
    <div class="newRecipeWrapper">

         <!--Recipe Form-->
         <!--If the submitted recipe already exists this page is reloaded with an error message-->
         <!--All inputs have regex to insure correct patterns, submit button triggers javascript below to test for 
            patternValidity and empty inputs for entire page before submitting-->
        
        <form class="col" id='submitRecipe' action='/newRecipe' method='post' novalidate enctype="multipart/form-data">
            <% if (recipeExists === true) {%><div class="warning">A recipe with that title already exists. Please try a new one.</div><%}%>
            <h1>New Recipe</h1>

            <div class="title col form-group">
                <h2>Title</h2>
                <input type='text' autocomplete="off" name='title' required pattern="[^{}<>]{2,50}"></input>
            </div>
            <div class="favourite col form-group"> <!-- Added form-group class -->
                <h2>Favourite</h2>
                <div class="custom-checkbox-wrapper">
                    <input type="checkbox" class="checkbox custom-checkbox-input" id="favouriteCheckbox" name="favourite">
                    <label for="favouriteCheckbox" class="custom-checkbox-label"></label> <!-- Added Label -->
                </div>
            </div>
            <div class="tagWrapper form-group"> <!-- Added form-group class -->
                <input type="hidden" name="categories" class="categories"></input>
                <div class="tagTitle">
                  <h2>Categories</h2>
                </div>
                <div class="tagContent">
                  <p>Press enter after each category or select from popular categories below</p>
                  <ul>
                    <input type="search" class="tagInput" spellcheck="false">
                    <button type="button" class="tagAddBtn" title="Add tag">+</button>
                  </ul>
                  <div class="presetWrapper">
                    <p class="presetTag">Main</p>
                    <p class="presetTag">Side</p>
                    <p class="presetTag">Dessert</p>
                    <p class="presetTag">Cocktail</p>
                    <p class="presetTag">Slow Cooker</p>
                    <p class="presetTag">Air Fryer</p>
                  </div>
                </div>
              </div>

        <% if (!isLink && !isImg) {%>
            <div class="upload col form-group">
                <h2>Upload Picture (Optional)</h2>
                <label class="custom-file-upload">
                    <input type="file" class="uploadInput" max-length="1" name="recipeImage" accept="image/*">
                    Choose File
                </label>
                <span class="file-name-display">No file chosen</span>
            </div>
        <%}%>

        <%if (isImg){%>
            <div class="upload col form-group">
                <h2>Upload Picture</h2>
                 <label class="custom-file-upload">
                    <input class="uploadInput" type="file" multiple max-length="6" name="recipeImage" accept="image/*" required>
                    Choose Files
                 </label>
                 <span class="file-name-display">No files chosen</span>
                 <div class="error-message" style="display: none;">Please select at least one image</div>
                <input type="hidden" name="isImg" value="isImg">
            </div>
        <%}%>

        <% if (isLink){%>
            <div class="Link form-group">
                <h2>Recipe Link</h2>
                <input type='text' name='link' autocomplete="off" required placeholder="https://example.com/recipe"></input>
            </div>     
        <%}%>

        <% if (!isLink && !isImg){%>
            <div class="description form-group"> <!-- Added form-group class -->
                <h2>Description</h2>
                <textarea name="description" rows="6" cols="10" wrap="soft" form="submitRecipe" required pattern="[^{}<>]{2,500}"></textarea> <!-- Removed duplicate name -->
            </div>


            <div class="ingredients row form-group"> <!-- Added form-group class -->
                <h2>Ingredients</h2>
                <button type="button" id="addIngredient">+</button>
            </div>

            <!--New ingredient nodes are appended to this list when the add ingredient button is clicked.-->
            <div class="ingredientsList">
                <div class="ingredientsNode form-group" id="ingredientDiv1">
                    <div class="input-row">
                        <h3>1</h3>
                        <input name="ingredient1" type="text" autocomplete="off" required pattern="[^{}<>]{2,70}">
                        <button id="ingredientBtn1">X</button>
                    </div>
                    <div class="error-message" style="display: none;">Please enter an ingredient</div>
                </div>
            </div>
            
            <div class="steps row form-group"> <!-- Added form-group class -->
                <h2>Steps</h2>
                <button type="button" id="addStep">+</button>
            </div>

            <!--New step nodes are appended to this list when the add step button is clicked.-->
            <div class="stepsList">
                <div class="stepsNode form-group" id="stepDiv1">
                    <div class="input-row">
                        <h3>1</h3>
                        <textarea name="step1" type="text"  autocomplete="off"required pattern="[^{}<>]{2,70}"></textarea>
                        <button id="stepBtn1" type="button">X</button>
                    </div>
                    <div class="error-message" style="display: none;">Please enter a step</div>
                </div>
            </div>
        <%}%>  

            <div class="submitWrapper">
                <button type='button' class='submitBtn'>SUBMIT</button>
            </div>
            
        </form>
    </div>

    <script>

        //--------------------------TAG SECTION LOGIC ----------------------//
        const tagUl = document.querySelector(".tagContent ul"),
        tagInput = document.querySelector(".tagContent ul input"),
        tagAddBtn = document.querySelector(".tagAddBtn"),
        tagNumb = document.querySelector(".tagDetails span"),
        tagPreset = document.querySelectorAll(".presetTag");


        let maxTags = 10,
        tags = [];

        countTags();
        createTag();

        function countTags(){
           // tagInput.focus();
        }

        function createTag(){
            tagUl.querySelectorAll("li").forEach(li => li.remove());
            tags.slice().reverse().forEach(tag =>{
                let liTag = `<li>${tag} <i class="uit uit-multiply" onclick="remove(this, '${tag}')"></i></li>`;
                tagUl.insertAdjacentHTML("afterbegin", liTag);
            });
            countTags();
        }

        function remove(element, tag){
            let index  = tags.indexOf(tag);
            tags = [...tags.slice(0, index), ...tags.slice(index + 1)];
            element.parentElement.remove();
            countTags();
        }

        function addTag(e){
            if(e.key == "Enter"){
                let tag = e.target.value.replace(/\s+/g, ' ');
                if(tag.length > 1 && !tags.includes(tag)){
                    if(tags.length < 10){
                        tag.split(',').forEach(tag => {
                            tags.push(tag);
                            createTag();
                        });
                    }
                }
                e.target.value = "";
            }
        }

        tagInput.addEventListener("keyup", addTag);
        
        // Function to position the + button next to the text
        function positionAddButton() {
            const inputValue = tagInput.value;
            if (inputValue.trim().length > 0) {
                // Create a temporary span to measure text width
                const tempSpan = document.createElement('span');
                tempSpan.style.visibility = 'hidden';
                tempSpan.style.position = 'absolute';
                tempSpan.style.fontSize = '0.95rem';
                tempSpan.style.fontFamily = 'Poppins, sans-serif';
                tempSpan.style.padding = '8px';
                tempSpan.textContent = inputValue;
                document.body.appendChild(tempSpan);
                
                const textWidth = tempSpan.offsetWidth;
                document.body.removeChild(tempSpan);
                
                // Position button right after the text with some padding
                const inputRect = tagInput.getBoundingClientRect();
                const containerRect = tagUl.getBoundingClientRect();
                const relativeLeft = (inputRect.left - containerRect.left) + textWidth + 8;
                
                tagAddBtn.style.left = relativeLeft + 'px';
                tagAddBtn.style.display = 'flex';
            } else {
                tagAddBtn.style.display = 'none';
            }
        }

        // Add event listener for input changes to reposition button
        tagInput.addEventListener('input', positionAddButton);
        tagInput.addEventListener('keyup', positionAddButton);

        // Add event listener for the + button
        tagAddBtn.addEventListener("click", function(){
            let tag = tagInput.value.replace(/\s+/g, ' ').trim();
            if(tag.length > 1 && !tags.includes(tag)){
                if(tags.length < 10){
                    tag.split(',').forEach(tag => {
                        tags.push(tag);
                        createTag();
                    });
                }
            }
            tagInput.value = "";
            positionAddButton(); // Update button position after clearing input
        });
        
        tagPreset.forEach((tag) => {
            tag.addEventListener("click", function(){

                if (!tags.includes(this.textContent)){
                    tags.push(this.textContent);
                    createTag();
                }
            
            })
        })
    // ----------------------------------------------------------------------------------------------//
    // -----------------------------       END OF TAG LOGIC       ------------------------------------//
    // ----------------------------------------------------------------------------------------------//




        //Grab isLink and isImg from ejs variable
        const isLink = "<%-JSON.stringify(isLink)%>";
        const isImg = "<%-JSON.stringify(isImg)%>";
        
        //Assign submit buttons
        let submitBtn = document.querySelector(".submitBtn");
        let submitRecipeForm = document.querySelector("#submitRecipe");

        //Only render step and ingredient node logic if it is a manually typed link
        if (isLink === "false" && isImg === "false"){

            //Assign button for adding steps/ingredients, and step area/ingredients for appending to.
            let stepAddButton = document.getElementById("addStep");
            let stepsArea = document.querySelector(".stepsList")
            let ingredientAddButton = document.getElementById("addIngredient");
            let ingredientsArea = document.querySelector(".ingredientsList")

            /*empty arrays for steps and ingredients are initialized as well as counters for how many are on screen
            this is also used when editing a recipe that already has multiple steps, and gets changed anytime
            any steps or ingredients are added or deleted*/
            let steps = [];
            let ingredients = [];
            let stepNumber;
            let ingredientNumber;

            //Assign function to recount "steps" or "ingredients"
            let setNumber = (recipeReq) => {
                if (recipeReq === "steps"){
                    steps = document.querySelectorAll(`.stepsNode`);
                    if (steps[0] === undefined){
                        stepNumber = 0;
                    } else {
                        stepNumber = steps.length;
                    }
                }
            
                else if (recipeReq === "ingredients"){
                    ingredients = document.querySelectorAll(`.ingredientsNode`);
                    if (ingredients[0] === undefined){
                        ingredientNumber = 0;
                    } else {
                        ingredientNumber = ingredients.length;
                    }
                }
                else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            //Assign function to assign delete buttons for steps or ingredients
            let initDeleteButtons = (recipeReq) => {
                if (recipeReq === "steps"){
                    // Start from i = 2 to skip the first step (which should not be deletable)
                    for (i = 2; i < steps.length + 1; i++){
                    let thisStepsNode = document.querySelector(`#stepDiv${i}`)
                    let thisNodeDeleteBtn = document.querySelector(`#stepBtn${i}`)
                    
                    /*When a nodes delete button is clicked, remove the node, recount the nodes,
                    reset the steps headers, and id's in order again accordingly*/
                    thisNodeDeleteBtn.addEventListener("click", function(){
                        // Only allow deletion if there's more than one step
                        if (steps.length > 1) {
                            thisStepsNode.remove();
                            setNumber("steps");
                            reset("steps"); 
                        }
                        })
                    }
                }
                else if (recipeReq === "ingredients"){
                    // Start from i = 2 to skip the first ingredient (which should not be deletable)
                    for (i = 2; i < ingredients.length + 1; i++){
                    let thisIngredientsNode = document.querySelector(`#ingredientDiv${i}`)
                    let thisNodeDeleteBtn = document.querySelector(`#ingredientBtn${i}`)
                    thisNodeDeleteBtn.addEventListener("click", function(){
                        // Only allow deletion if there's more than one ingredient
                        if (ingredients.length > 1) {
                            thisIngredientsNode.remove();
                            setNumber("ingredients");
                            reset("ingredients"); 
                        }
                        })
                    }
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            //Assign function to create new step or ingredient node
            let create = (recipeReq) => {

                //define elements for a node, append them together
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("textarea");
                let deleteButton = document.createElement("button");
                let errorDiv = document.createElement("div");
                
                textInput.type = "text";
                textInput.required = true;
                deleteButton.textContent = "X";
                deleteButton.type = "button";
                errorDiv.className = "error-message";
                errorDiv.style.display = "none";

                // Create input row div to hold the inputs in a row
                let inputRow = document.createElement("div");
                inputRow.classList.add("input-row");
                
                // Add elements to input row
                inputRow.append(h3);
                inputRow.append(textInput);
                inputRow.append(deleteButton);
                
                // Add input row and error message to main div
                div.classList.add("form-group");
                div.append(inputRow);
                div.append(errorDiv);

                if (recipeReq === "steps"){
                    //increment step
                    stepNumber += 1;
                    //Add names, ids, types, and text-content to nodes
                    h3.textContent = `${stepNumber}`;
                    div.id = `stepDiv${stepNumber}`;
                    div.classList.add("stepsNode", "row");
                    textInput.name = `step${stepNumber}`;
                    textInput.pattern = "[^{}<>]{2,300}";
                    textInput.setAttribute("autocomplete", "off")
                    deleteButton.id = `stepBtn${stepNumber}`;
                    errorDiv.textContent = "Please enter a step";

                    //append nodes to correct area
                    stepsArea.append(div);

                    //recount steps and update the step count
                    setNumber("steps");
                }
                
                //repeat for ingredients
                else if (recipeReq === "ingredients"){
                    ingredientNumber += 1;
                    h3.textContent = `${ingredientNumber}`;
                    div.classList.add("row");
                    div.classList.add("ingredientsNode");
                    div.id = `ingredientDiv${ingredientNumber}`;
                    textInput.name = `ingredient${ingredientNumber}`;
                    textInput.pattern = "[^{}<>]{2,70}";
                    textInput.setAttribute("autocomplete", "off")
                    deleteButton.id = `ingredientBtn${ingredientNumber}`;
                    errorDiv.textContent = "Please enter an ingredient";
                    ingredientsArea.append(div);
                    setNumber("ingredients")
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            /*Assign function to change ids, names, and h3s of steps to represent correct order counting from one
            after deleting a step or ingredient*/
            let reset = (recipeReq) => {
                if (recipeReq === "steps"){
                    for (i=0; i < steps.length; i++){
                        const row = steps[i].querySelector('.input-row');
                        steps[i].id = `stepDiv${i+1}`;
                        row.children[1].name = `step${i+1}`;
                        row.children[0].textContent = `${i+1}`;
                        row.children[2].id = `stepBtn${i+1}`;
                    }
                }
                else if (recipeReq === "ingredients"){
                    for (i=0; i < ingredients.length; i++){
                        const row = ingredients[i].querySelector('.input-row');
                        ingredients[i].id = `ingredientDiv${i+1}`;
                        row.children[1].name = `ingredient${i+1}`;
                        row.children[0].textContent = `${i+1}`;
                        row.children[2].id = `ingredientBtn${i+1}`;
                    }
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }
            
            //initiate step number and delete buttons on page load
            setNumber("steps");
            initDeleteButtons("steps");
            setNumber("ingredients");
            initDeleteButtons("ingredients");
        
            //when step/ingredient add button is pressed, create new, append it, and then assign event listeners to delete buttons
            stepAddButton.addEventListener("click", function(){
                create("steps");
                initDeleteButtons("steps");
            })
            ingredientAddButton.addEventListener("click", function(){
                console.log("here")
                setNumber("ingredients");
                create("ingredients");
                initDeleteButtons("ingredients");
            })
        }
        
        // Initialize form validation
        document.addEventListener('DOMContentLoaded', function() {
            initFormValidation('submitRecipe');
        });

        // Handle form submission with custom validation
        submitBtn.addEventListener("click", function(e){
            e.preventDefault();
            let categories = document.querySelector(".categories");
            let isValid = true;

            // Validate all required fields
            document.querySelectorAll("#submitRecipe input[required], #submitRecipe textarea[required]").forEach(input => {
                if (!validateRequired(input)) {
                    isValid = false;
                }
            });

            // Validate URL if it's a link recipe
            if (isLink === "true") {
                const linkInput = document.querySelector('input[name="link"]');
                if (!validateUrl(linkInput)) {
                    isValid = false;
                }
            }

            // Validate image upload for image recipes
            if (isImg === "true") {
                const imageInput = document.querySelector('.uploadInput');
                if (!validateImageUpload(imageInput)) {
                    isValid = false;
                }
            }

            // Validate ingredients and steps for manual recipes
            if (isLink === "false" && isImg === "false") {
                if (!validateIngredients()) {
                    isValid = false;
                }
                if (!validateSteps()) {
                    isValid = false;
                }
            }

            // If form is valid, set categories and submit
            if (isValid && submitRecipeForm.checkValidity()) {
                if (categories) {
                    categories.value = tags;
                }
                submitRecipeForm.submit();
            }
        });

        // --- Script for Custom File Input Display ---
        document.querySelectorAll('.uploadInput').forEach(input => {
            input.addEventListener('change', function(e) {
                const fileNameDisplay = this.closest('.upload').querySelector('.file-name-display');
                if (this.files && this.files.length > 1) {
                    fileNameDisplay.textContent = `${this.files.length} files selected`;
                } else if (this.files && this.files.length == 1) {
                    fileNameDisplay.textContent = this.files[0].name;
                } else {
                    fileNameDisplay.textContent = 'No file chosen';
                }
            });
        });

    </script>
    <script src="/pwa.js"></script>
</body>
</html>

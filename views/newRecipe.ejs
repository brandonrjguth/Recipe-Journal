<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Recipe</title>
    <link rel="stylesheet" type="text/css" href="/main.css">
    <link rel="stylesheet" type="text/css" href="/newRecipe.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,700;1,100&display=swap" rel="stylesheet">
</head>
<body>
    <%- include('partials/header') %>

    <!---->
    <div class="newRecipeWrapper">
         <!--Recipe Form-->
         <!--If the submitted recipe already exists this page is reloaded with an error message-->
         <!--All inputs have regex to insure correct patterns, submit button triggers javascript below to test for 
            patternValidity and empty inputs for entire page before submitting-->
         <% if (recipeExists === true) {%>A recipe with that title already exists. Please try a new one.<%}%>
        <form class="col" id='submitRecipe' action='/newRecipe' method='post' enctype="multipart/form-data">

            <div class="title row">
                <h2>Title</h2>
                <input type='text' name='title' required pattern="[^{}<>]{2,50}"></input>
            </div>
            <div class="favourite row">
                <h2>Favourite</h2>
                <input type="checkbox" class="checkbox" name="favourite"></input>
            </div>

        <% if (!isLink && !isImg) {%>
            <div class="upload row">
                <h2>Upload Picture (Optional)</h2>
                <input type="file" class="uploadInput" max-length="1" name="recipeImage" accept="image/*">
            </div>
        <%}%>

        <%if (isImg){%>
            <div class="upload row">
                <h2>Upload Picture</h2>
                <input class="uploadInput" type="file" multiple max-length="6" name="recipeImage" accept="image/*">
                <input type="hidden" name="isImg" value="isImg">
            </div>
        <%}%>

        <% if (isLink){%>
            <div class="Link">
                <h2>Recipe Link</h2>
                <input type='text' name='link' required></input>
            </div>     
        <%}%>

        <% if (!isLink && !isImg){%>
            <div class="description">
                <h2>Description</h2>
                <textarea name="description" rows="6" cols="10" wrap="soft" form="submitRecipe" name="description" required pattern="[^{}<>]{2,500}"></textarea>
            </div>

        
            <div class="ingredients row">
                <h2>Ingredients</h2>
                <button type="button" id="addIngredient">+</button>
            </div>

            <!--New ingredient nodes are appended to this list when the add ingredient button is clicked.-->
            <div class="ingredientsList">
                <div class="row ingredientsNode" id="ingredientDiv1">
                    <h3>1</h3>
                    <input name="ingredient1" type="text" required="" pattern="[^{}<>]{2,70}">
                    <button id="ingredientBtn1">X</button>
                </div>
            </div>
            
            <div class="steps row">
                <h2>Steps</h2>
                <button type="button" id="addStep">+</button>
            </div>

            <!--New step nodes are appended to this list when the add step button is clicked.-->
            <div class="stepsList">
                <div class="stepsNode row" id="stepDiv1">
                    <h3>1</h3>
                    <textarea name="step1" type="text" required="" pattern="[^{}<>]{2,70}"></textarea>
                    <button id="stepBtn1" type="button">X</button>
                </div>
            </div>
        <%}%>  

            <div class="submitWrapper">
                <button type='button' class='submitBtn'>SUBMIT</button>
            </div>
            
        </form>
    </div>

    <script>
        //Grab isLink and isImg from ejs variable
        const isLink = "<%-JSON.stringify(isLink)%>";
        const isImg = "<%-JSON.stringify(isImg)%>";
        
        //Assign submit buttons
        let submitBtn = document.querySelector(".submitBtn");
        let submitRecipeForm = document.querySelector("#submitRecipe");

        //Only render step and ingredient node logic if it is a manually typed link
        if (isLink === "false" && !isImg === "false"){

            //Assign button for adding steps/ingredients, and step area/ingredients for appending to.
            let stepAddButton = document.getElementById("addStep");
            let stepsArea = document.querySelector(".stepsList")
            let ingredientAddButton = document.getElementById("addIngredient");
            let ingredientsArea = document.querySelector(".ingredientsList")

            /*empty arrays for steps and ingredients are initialized as well as counters for how many are on screen
            this is also used when editing a recipe that already has multiple steps, and gets changed anytime
            any steps or ingredients are added or deleted*/
            let steps = [];
            let ingredients = [];
            let stepNumber;
            let ingredientNumber;

            //Assign function to recount "steps" or "ingredients"
            let setNumber = (recipeReq) => {
                if (recipeReq === "steps"){
                    steps = document.querySelectorAll(`.stepsNode`);
                    if (steps[0] === undefined){
                        stepNumber = 0;
                    } else {
                        stepNumber = steps.length;
                    }
                }
            
                else if (recipeReq === "ingredients"){
                    ingredients = document.querySelectorAll(`.ingredientsNode`);
                    if (ingredients[0] === undefined){
                        ingredientNumber = 0;
                    } else {
                        ingredientNumber = ingredients.length;
                    }
                }
                else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            //Assign function to assign delete buttons for steps or ingredients
            let initDeleteButtons = (recipeReq) => {
                if (recipeReq === "steps"){
                    for (i = 1; i < steps.length + 1; i++){
                    let thisStepsNode = document.querySelector(`#stepDiv${i}`)
                    let thisNodeDeleteBtn = document.querySelector(`#stepBtn${i}`)
                    
                    /*When a nodes delete button is clicked, remove the node, recount the nodes,
                    reset the steps headers, and id's in order again accordingly*/
                    thisNodeDeleteBtn.addEventListener("click", function(){
                        thisStepsNode.remove();
                        setNumber("steps");
                        reset("steps"); 
                        })
                    }
                }
                else if (recipeReq === "ingredients"){
                    for (i = 1; i < ingredients.length + 1; i++){
                    let thisIngredientsNode = document.querySelector(`#ingredientDiv${i}`)
                    let thisNodeDeleteBtn = document.querySelector(`#ingredientBtn${i}`)
                    thisNodeDeleteBtn.addEventListener("click", function(){
                        thisIngredientsNode.remove();
                        setNumber("ingredients");
                        reset("ingredients"); 
                        })
                    }
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            //Assign function to create new step or ingredient node
            let create = (recipeReq) => {

                //define elements for a node, append them together
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("textarea");
                let deleteButton = document.createElement("button");
                textInput.type = "text";
                textInput.required = true;
                deleteButton.textContent = "X";
                deleteButton.type = "button";
                div.append(h3);
                div.append(textInput);
                div.append(deleteButton);

                if (recipeReq === "steps"){
                    //increment step
                    stepNumber += 1;
                    //Add names, ids, types, and text-content to nodes
                    h3.textContent = `${stepNumber}`;
                    div.id = `stepDiv${stepNumber}`;
                    div.classList.add("stepsNode", "row");
                    textInput.name = `step${stepNumber}`;
                    textInput.pattern = "[^{}<>]{2,300}";
                    deleteButton.id = `stepBtn${stepNumber}`;

                    //append nodes to correct area
                    stepsArea.append(div);

                    //recount steps and update the step count
                    setNumber("steps");
                }
                
                //repeat for ingredients
                else if (recipeReq === "ingredients"){
                    ingredientNumber += 1;
                    h3.textContent = `${ingredientNumber}`;
                    div.classList.add("row");
                    div.classList.add("ingredientsNode");
                    div.id = `ingredientDiv${ingredientNumber}`;
                    textInput.name = `ingredient${ingredientNumber}`;
                    textInput.pattern = "[^{}<>]{2,70}";
                    deleteButton.id = `ingredientBtn${ingredientNumber}`;
                    ingredientsArea.append(div);
                    setNumber("ingredients")
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }

            /*Assign function to change ids, names, and h3s of steps to represent correct order counting from one
            after deleting a step or ingredient*/
            let reset = (recipeReq) => {
                if (recipeReq === "steps"){
                    for (i=0; i < steps.length; i++){
                        steps[i].id = `stepDiv${i+1}`;
                        steps[i].children[1].name = `step${i+1}`
                        steps[i].children[0].textContent = `${i+1}`
                        steps[i].children[2].id = `stepBtn${i+1}`
                    }
                }
                else if (recipeReq === "ingredients"){
                    for (i=0; i < ingredients.length; i++){
                        ingredients[i].id = `ingredientDiv${i+1}`;
                        ingredients[i].children[1].name = `ingredient${i+1}`
                        ingredients[i].children[0].textContent = `${i+1}`
                        ingredients[i].children[2].id = `ingredientBtn${i+1}`
                    }
                } else {
                    console.log("Error, valid paramaters are 'steps' or 'ingredients'")
                }
            }
            
            //initiate step number and delete buttons on page load
            setNumber("steps");
            initDeleteButtons("steps");
            setNumber("ingredients");
            initDeleteButtons("ingredients");
        
            //when step/ingredient add button is pressed, create new, append it, and then assign event listeners to delete buttons
            stepAddButton.addEventListener("click", function(){
                create("steps");
                initDeleteButtons("steps");
            })
            ingredientAddButton.addEventListener("click", function(){
                setNumber("ingredients");
                create("ingredients");
                initDeleteButtons("ingredients");
            })
        }
        
        //Checks to make sure every input is filled and that there is atleast one ingredient and one step before submitting. Error messages not handled.
        submitBtn.addEventListener("click", function(){
            let inputs = document.querySelectorAll("#submitRecipe input, textarea");
            console.log(inputs);
            
            let inputsFilled = true;
            let inputsValid = true;

            for (i = 0; i < inputs.length; i++){
                if (inputs[i].validity.valueMissing === true){
                    inputsFilled = false;
                    console.log("input missing");
                }
                if (inputs[i].validity.patternMismatch === true){
                    inputsValid = false;
                    console.log("pattern mismatch");
                }
            }

            if (inputsValid && inputsFilled){
                submitRecipeForm.submit();
            }
        })
    </script>
</body>
</html>
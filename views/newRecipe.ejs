<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>New Recipe</title>
    <link rel="stylesheet" type="text/css" href="/styles.css">
</head>
<body>
    <%- include('partials/header') %>

    <!---->
    <div class="newRecipeWrapper">
        <h1>New Recipe</h1>

         <!--Recipe Form-->
         <% if (recipeExists === true) {%>A recipe with that title already exists. Please try a new one.<%}%>
        <form class="col" id='submitRecipe' action='/newRecipe' method='post'>

            <div class="Title row">
                <h2>Title</h2>
                <input type='text' name='title' required pattern="[^{}<>]{2,50}"></input>
            </div>

            <h3>Favourite</h3><input type="checkbox" name="favourite"></input>
            <h2>Description</h2>
            <input type='text' name='description' required pattern="[^{}<>]{2,500}"></input>

            <h2>Image URL</h2>
            <input type='text' name='image' pattern="(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png|webp|bmp|jpeg){0,500}" required></input>

            <div class="Ingredients row">
                <h2>Ingredients</h2>
                <button type="button" id="addIngredient">+</button>
            </div>

            <div class="ingredientsList">
                <div class="row ingredientsNode" id="ingredientDiv1">
                    <h3>1</h3>
                    <input name="ingredient1" type="text" required="" pattern="[^{}<>]{2,70}">
                    <button id="ingredientBtn1">X</button>
                </div>
            </div>
            
            <div class="Steps row">
                <h2>Steps</h2>
                <button type="button" id="addStep">+</button>
            </div>

            <div class="stepsList">
                <div class="stepsNode" id="stepDiv1">
                    <h3>Step 1</h3>
                    <input name="step1" type="text" required="" pattern="[^{}<>]{2,70}">
                    <button id="stepBtn1" type="button">X</button>
                </div>
            </div>
            <button type='button' class='submitBtn'>SUBMIT</button>

        </form>
    </div>

    <script>

        //Assign button for adding steps, and step area for appending steps.
        let stepAddButton = document.getElementById("addStep");
        let stepsArea = document.querySelector(".stepsList")
        let ingredientAddButton = document.getElementById("addIngredient");
        let ingredientsArea = document.querySelector(".ingredientsList")
        let steps = [];
        let ingredients = [];
        let stepNumber;
        let ingredientNumber;

        //Assign function to recount "steps" or "ingredients", assign number, change values
        let setNumber = (recipeReq) => {
            if (recipeReq === "steps"){
                steps = document.querySelectorAll(`.stepsNode`);
                if (steps[0] === undefined){
                    stepNumber = 0;
                } else {
                    stepNumber = steps.length;
                }
            }
            
            if (recipeReq === "ingredients"){
                ingredients = document.querySelectorAll(`.ingredientsNode`);
                if (ingredients[0] === undefined){
                    ingredientNumber = 0;
                } else {
                    ingredientNumber = ingredients.length;
                }
            }

            else {
                console.log("Error, valid paramaters are 'steps' or 'ingredients'")
            }
        }

        //Assign function to assign delete buttons for steps or ingredients
        let initDeleteButtons = (recipeReq) => {

            if (recipeReq === "steps"){
                for (i = 1; i < steps.length + 1; i++){
                let thisStepsNode = document.querySelector(`#stepDiv${i}`)
                let thisNodeDeleteBtn = document.querySelector(`#stepBtn${i}`)
                //add event listener to this nodes delete button which will delete this node
                thisNodeDeleteBtn.addEventListener("click", function(){
                    thisStepsNode.remove();
                    setNumber("steps");
                    reset("steps"); 
                    })
                }
            }

            if (recipeReq === "ingredients"){
                for (i = 1; i < ingredients.length + 1; i++){
                let thisIngredientsNode = document.querySelector(`#ingredientDiv${i}`)
                let thisNodeDeleteBtn = document.querySelector(`#ingredientBtn${i}`)
                //add event listener to this nodes delete button which will delete this node
                thisNodeDeleteBtn.addEventListener("click", function(){
                    thisIngredientsNode.remove();
                    setNumber("ingredients");
                    reset("ingredients"); 
                    })
                }
            }
        }

        //Assign function to create new step or ingredient node
        let create = (recipeReq) => {

            if (recipeReq === "steps"){
                stepNumber += 1;
                //define elements for a step node
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("input");
                let deleteButton = document.createElement("button");
                //Add names, ids, and text-content to nodes
                h3.textContent = `Step ${stepNumber}`;
                div.id = `stepDiv${stepNumber}`;
                div.classList.add("stepsNode");
                textInput.name = `step${stepNumber}`;
                textInput.type = "text";
                textInput.required = true;
                textInput.pattern = "[^{}<>]{2,300}";
                deleteButton.id = `stepBtn${stepNumber}`;
                deleteButton.textContent = "X";
                deleteButton.type = "button";
                //append nodes together and then append to the step area
                div.append(h3);
                div.append(textInput);
                div.append(deleteButton);
                stepsArea.append(div);
                setNumber("steps");
            }

            if (recipeReq === "ingredients"){
                ingredientNumber += 1;
                let div = document.createElement("div");
                let h3 = document.createElement("h3");
                let textInput = document.createElement("input");
                let deleteButton = document.createElement("button");
                h3.textContent = `${ingredientNumber}`;
                div.classList.add("row");
                div.classList.add("ingredientsNode");
                div.id = `ingredientDiv${ingredientNumber}`;
                textInput.name = `ingredient${ingredientNumber}`;
                textInput.type = "text";
                textInput.required = true;
                textInput.pattern = "[^{}<>]{2,70}";
                deleteButton.id = `ingredientBtn${ingredientNumber}`;
                deleteButton.textContent = "X";
                div.append(h3);
                div.append(textInput);
                div.append(deleteButton);
                ingredientsArea.append(div);
                setNumber("ingredients")
            }
        }

        //Assign function to proper change ids, names, and h3s of steps to represent correct order after deleting a step or ingredient
        let reset = (recipeReq) => {

            if (recipeReq === "steps"){
                for (i=0; i < steps.length; i++){
                    steps[i].id = `stepDiv${i+1}`;
                    steps[i].children[1].name = `step${i+1}`
                    steps[i].children[0].textContent = `Step ${i+1}`
                    steps[i].children[2].id = `stepBtn${i+1}`
                }
            }

            if (recipeReq === "ingredients"){
                for (i=0; i < ingredients.length; i++){
                    ingredients[i].id = `ingredientDiv${i+1}`;
                    ingredients[i].children[1].name = `ingredient${i+1}`
                    ingredients[i].children[0].textContent = `${i+1}`
                    ingredients[i].children[2].id = `ingredientBtn${i+1}`
                }
            }
        }

        //initiate step number and delete buttons on page load
        setNumber("steps");
        initDeleteButtons("steps");
        setNumber("ingredients");
        initDeleteButtons("ingredients");
    
        //when step add buitton is pressed, set the step number, create a new step and append it, then assign event listeners to delete buttons
        stepAddButton.addEventListener("click", function(){
            setNumber("steps");
            create("steps");
            initDeleteButtons("steps");
        })

        ingredientAddButton.addEventListener("click", function(){
            setNumber("ingredients");
            create("ingredients");
            initDeleteButtons("ingredients");
        })

        //Manual validation checks before submit
        let submitBtn = document.querySelector(".submitBtn");
        let submitRecipeForm = document.querySelector("#submitRecipe");

        //Checks to make sure every input is filled and that there is atleast one ingredient and one step before submitting. Error messages not handled.
        submitBtn.addEventListener("click", function(){
            let inputs = document.querySelectorAll("input");
            let inputsFilled = true;
            let inputsValid = true;

            console.log(inputs)

            for (i = 0; i < inputs.length; i++){
                if (inputs[i].validity.valueMissing === true){
                    inputsFilled = false;
                    console.log("input missing");
                }
                if (inputs[i].validity.patternMismatch === true){
                    inputsValid = false;
                    console.log("pattern mismatch");
                }
            }

            if (document.querySelectorAll(".ingredientsNode")[0] !== undefined && document.querySelectorAll(".stepsNode")[0] !== undefined && inputsFilled === true && inputsValid === true){
                submitRecipeForm.submit();
            };
        })

    </script>
</body>
</html>